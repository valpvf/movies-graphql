{"version":3,"file":"static/js/717.c3d0bae8.chunk.js","mappings":"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","sources":["features/Movies/MoviesFilter.tsx","features/Movies/MovieCard.tsx","features/Movies/Movies.tsx","hooks/useIntersectionObserver.ts"],"sourcesContent":["import {\n  Autocomplete,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Paper,\n  Skeleton,\n  TextField,\n  debounce,\n} from \"@mui/material\";\nimport FilterAltOutlinedIcon from \"@mui/icons-material/FilterAltOutlined\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport {\n  KeywordItem,\n  useGetGenresQuery,\n  useGetKeywordsQuery,\n} from \"../../services/tmdb\";\n\nexport interface Filters {\n  keywords: KeywordItem[];\n  genres: number[];\n}\n\ninterface MoviesFilterProps {\n  onApply(filters: Filters): void;\n}\n\nexport default function MoviesFilter({ onApply }: MoviesFilterProps) {\n  const { control, handleSubmit, formState } = useForm<Filters>({\n    defaultValues: {\n      keywords: [],\n      genres: [],\n    },\n  });\n\n  const [keywordsQuery, setKeywordsQuery] = useState<string>(\"\");\n  const { data: keywordsOptions = [], isLoading: keywordsLoading } =\n    useGetKeywordsQuery(keywordsQuery, { skip: !keywordsQuery });\n  const { data: genres, isLoading: genresLoading } =\n    useGetGenresQuery();\n\n  const debouncedFetchKeywordsOptions = useMemo(\n    () =>\n      debounce((query: string) => {\n        setKeywordsQuery(query);\n      }, 1000),\n    []\n  );\n\n  return (\n    <Paper sx={{ m: 2, p: 0.5, maxWidth: 350 }}>\n      <form onSubmit={handleSubmit(onApply)}>\n        <FormControl\n          sx={{ m: 2, display: \"block\" }}\n          component=\"fieldset\"\n          variant=\"standard\"\n        >\n          <Controller\n            name=\"keywords\"\n            control={control}\n            render={({ field: { onChange, value } }) => (\n              <Autocomplete\n                multiple\n                loading={keywordsLoading}\n                disablePortal\n                options={keywordsOptions}\n                filterOptions={(x) => x}\n                getOptionLabel={(option) => option.name}\n                onChange={(_, value) => onChange(value)}\n                value={value}\n                isOptionEqualToValue={(option, value) =>\n                  option.id === value.id\n                }\n                onInputChange={(_, value) =>\n                  debouncedFetchKeywordsOptions(value)\n                }\n                renderInput={(params) => (\n                  <TextField {...params} label=\"Keywords\" />\n                )}\n              />\n            )}\n          />\n        </FormControl>\n        <FormControl\n          sx={{ m: 2, display: \"block\" }}\n          component=\"fieldset\"\n          variant=\"standard\"\n        >\n          {genresLoading ? (\n            <Skeleton width={300} height={480} />\n          ) : (\n            <>\n              <FormLabel component=\"legend\">Genres</FormLabel>\n              <FormGroup sx={{ maxHeight: 500 }}>\n                <Controller\n                  name=\"genres\"\n                  control={control}\n                  render={({ field }) => (\n                    <>\n                      {genres?.map((genre) => (\n                        <FormControlLabel\n                          key={genre.id}\n                          control={\n                            <Checkbox\n                              value={genre.id}\n                              checked={field.value.includes(genre.id)}\n                              onChange={(event, checked) => {\n                                const valueNumber = Number(\n                                  event.target.value\n                                );\n                                if (checked) {\n                                  field.onChange([\n                                    ...field.value,\n                                    valueNumber,\n                                  ]);\n                                } else {\n                                  field.onChange(\n                                    field.value.filter(\n                                      (value) => value !== valueNumber\n                                    )\n                                  );\n                                }\n                              }}\n                            />\n                          }\n                          label={genre.name}\n                        />\n                      ))}\n                    </>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormControl>\n        <Button\n          type=\"submit\"\n          sx={{ m: 2 }}\n          variant=\"contained\"\n          startIcon={<FilterAltOutlinedIcon />}\n          disabled={!formState.isDirty}\n        >\n          Apply filter\n        </Button>\n      </form>\n    </Paper>\n  );\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  IconButton,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { memo } from \"react\";\n\ninterface Props {\n  id: number;\n  title: string;\n  popularity: number;\n  overview: string;\n  image?: string;\n  enableUserActions?: boolean;\n  onAddFavorite?(id: number): void;\n}\n\nfunction MovieCard({\n  id,\n  title,\n  overview,\n  popularity,\n  onAddFavorite,\n  image = \"/movie-thumb.png\",\n  enableUserActions = false,\n}: Props) {\n  return (\n    <Card\n      sx={{\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <CardMedia\n        component=\"div\"\n        sx={{ pt: \"56.25%\" }}\n        image={image}\n      />\n      <CardContent sx={{ flexGrow: 1 }}>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {overview}\n        </Typography>\n        <Typography variant=\"button\" display=\"block\" mt={2}>\n          {popularity}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          component={RouterLink}\n          to={`/movies/${id}`}\n          color=\"secondary\"\n        >\n          Details\n        </Button>\n        {enableUserActions && (\n          <Tooltip title=\"Add to favorites\">\n            <IconButton onClick={() => onAddFavorite?.(id)}>\n              <FavoriteIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default memo(MovieCard) as typeof MovieCard;\n","import { useCallback, useContext, useState } from \"react\";\nimport {\n  Container,\n  Grid,\n  LinearProgress,\n  Typography,\n} from \"@mui/material\";\nimport { AuthContext, anonymousUser } from \"../../AuthContext\";\nimport { useIntersectionObserver } from \"../../hooks/useIntersectionObserver\";\nimport MoviesFilter from \"./MoviesFilter\";\nimport MovieCard from \"./MovieCard\";\nimport {\n  useGetMoviesQuery,\n  useGetConfigurationQuery,\n  MoviesQuery,\n} from \"../../services/tmdb\";\n\nconst initialQuery = {\n  page: 1,\n  filters: {},\n};\n\nexport function Component() {\n  const [query, setQuery] = useState<MoviesQuery>(initialQuery);\n\n  const { data: configuration } = useGetConfigurationQuery();\n  const { data, isFetching } = useGetMoviesQuery(query);\n  const movies = data?.results;\n  const hasMorePages = data?.hasMorePages;\n\n  function formatImageUrl(imagePath?: string | null) {\n    return imagePath && configuration\n      ? `${configuration.images.base_url}w780${imagePath}`\n      : undefined;\n  }\n\n  const auth = useContext(AuthContext);\n  const loggedIn = auth.user !== anonymousUser;\n\n  const onIntersect = useCallback(() => {\n    if (hasMorePages) {\n      setQuery((q) => ({ ...q, page: q.page + 1 }));\n    }\n  }, [hasMorePages]);\n\n  const [targetRef] = useIntersectionObserver({ onIntersect });\n\n  const handleAddToFavorites = useCallback(\n    (id: number): void =>\n      alert(\n        `Not implemented! Action: ${auth.user.name} is adding movie ${id} to favorites.`\n      ),\n    [auth.user.name]\n  );\n\n  return (\n    <Grid container spacing={2} sx={{ flexWrap: \"nowrap\" }}>\n      <Grid item xs=\"auto\">\n        <MoviesFilter\n          onApply={(filters) => {\n            const moviesFilters = {\n              keywords: filters?.keywords.map((k) => k.id),\n              genres: filters?.genres,\n            };\n\n            setQuery({\n              page: 1,\n              filters: moviesFilters,\n            });\n          }}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Container sx={{ py: 8 }} maxWidth=\"lg\">\n          {!isFetching && !movies?.length && (\n            <Typography variant=\"h6\">\n              No movies were found that match your query.\n            </Typography>\n          )}\n          <Grid container spacing={4}>\n            {movies?.map((m, i) => (\n              <Grid item key={m.id} xs={12} sm={6} md={4}>\n                <MovieCard\n                  key={m.id}\n                  id={m.id}\n                  title={m.title}\n                  overview={m.overview}\n                  popularity={m.popularity}\n                  image={formatImageUrl(m.backdrop_path)}\n                  enableUserActions={loggedIn}\n                  onAddFavorite={handleAddToFavorites}\n                />\n              </Grid>\n            ))}\n          </Grid>\n          <div ref={targetRef}>\n            {isFetching && (\n              <LinearProgress color=\"secondary\" sx={{ mt: 3 }} />\n            )}\n          </div>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nComponent.displayName = \"Movies\";\n","import { useRef, useState, useEffect, MutableRefObject } from \"react\";\n\ninterface Options {\n  root?: Element;\n  rootMargin?: string;\n  threshold?: number;\n  onIntersect?(): void;\n}\n\ntype HookReturnType = [\n  MutableRefObject<null>,\n  IntersectionObserverEntry?\n];\n\nexport function useIntersectionObserver(\n  options: Options = {}\n): HookReturnType {\n  const {\n    threshold = 1.0,\n    root = null,\n    rootMargin = \"0px\",\n    onIntersect,\n  } = options;\n\n  const targetRef = useRef(null);\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries: IntersectionObserverEntry[]) => {\n        const [entry] = entries;\n        setEntry(entry);\n\n        if (entry.isIntersecting) {\n          onIntersect?.();\n        }\n      },\n      { threshold, root, rootMargin }\n    );\n    const currentRef = targetRef.current;\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return function () {\n      if (currentRef) {\n        observer.disconnect();\n      }\n    };\n  }, [onIntersect, root, rootMargin, threshold]);\n\n  return [targetRef, entry];\n}\n"],"names":["MoviesFilter","_ref","onApply","control","handleSubmit","formState","useForm","defaultValues","keywords","genres","keywordsQuery","setKeywordsQuery","useState","data","keywordsOptions","isLoading","keywordsLoading","useGetKeywordsQuery","skip","genresLoading","useGetGenresQuery","debouncedFetchKeywordsOptions","useMemo","debounce","query","_jsx","Paper","sx","m","p","maxWidth","children","_jsxs","onSubmit","FormControl","display","component","variant","Controller","name","render","_ref2","field","onChange","value","Autocomplete","multiple","loading","disablePortal","options","filterOptions","x","getOptionLabel","option","_","isOptionEqualToValue","id","onInputChange","renderInput","params","TextField","label","Skeleton","width","height","_Fragment","FormLabel","FormGroup","maxHeight","_ref3","map","genre","FormControlLabel","Checkbox","checked","includes","event","valueNumber","Number","target","filter","Button","type","startIcon","FilterAltOutlinedIcon","disabled","isDirty","MovieCard","title","overview","popularity","onAddFavorite","image","enableUserActions","Card","flexDirection","CardMedia","pt","CardContent","flexGrow","Typography","gutterBottom","color","mt","CardActions","RouterLink","to","concat","Tooltip","IconButton","onClick","FavoriteIcon","memo","initialQuery","page","filters","Component","setQuery","configuration","useGetConfigurationQuery","isFetching","useGetMoviesQuery","movies","results","hasMorePages","auth","useContext","AuthContext","loggedIn","user","anonymousUser","onIntersect","useCallback","q","targetRef","arguments","length","undefined","threshold","root","rootMargin","useRef","entry","setEntry","useEffect","observer","IntersectionObserver","entries","isIntersecting","currentRef","current","observe","disconnect","useIntersectionObserver","handleAddToFavorites","alert","Grid","container","spacing","flexWrap","item","xs","moviesFilters","k","Container","py","i","sm","md","imagePath","backdrop_path","images","base_url","ref","LinearProgress","displayName"],"sourceRoot":""}